<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oracleliudao.github.io</id>
    <title>神谕六道</title>
    <updated>2020-05-22T12:25:23.307Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://oracleliudao.github.io"/>
    <link rel="self" href="https://oracleliudao.github.io/atom.xml"/>
    <subtitle>觉得不如意的时候，有人过得比你更惨。</subtitle>
    <logo>https://oracleliudao.github.io/images/avatar.png</logo>
    <icon>https://oracleliudao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 神谕六道</rights>
    <entry>
        <title type="html"><![CDATA[Spring面试题]]></title>
        <id>https://oracleliudao.github.io/post/spring-mian-shi-ti/</id>
        <link href="https://oracleliudao.github.io/post/spring-mian-shi-ti/">
        </link>
        <updated>2020-04-20T06:38:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="spring是什么"><strong>Spring是什么?</strong></h2>
<p>Spring是一个轻量级的IoC和AOP容器框架。目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。常见的配置方式有三种：基于XML的配置、基于注解的配置、基于Java的配置。</p>
<p>主要由以下几个模块组成：</p>
<p>Spring Core：核心类库，提供IOC服务；</p>
<p>Spring AOP：AOP服务；</p>
<p>Spring DAO：对JDBC的抽象，简化了数据访问异常的处理；</p>
<p>Spring ORM：对现有的ORM框架的支持；</p>
<p>Spring Web：提供了基本的面向Web的综合特性，例如多方文件上传；</p>
<p>Spring MVC：提供面向Web应用的Model-View-Controller实现。</p>
<h2 id="2-spring-的优点">2、Spring 的优点？</h2>
<p>（1）spring属于低侵入式设计，代码的污染极低；</p>
<p>（2）spring的DI机制将对象之间的依赖关系交由框架处理，减低组件的耦合性；</p>
<p>（3）Spring提供了AOP技术，支持将一些通用任务，如安全、事务、日志、权限等进行集中式管理，从而提供更好的复用。</p>
<p>（4）spring对于主流的应用框架提供了集成支持。</p>
<h2 id="3-spring的aop理解">3、Spring的AOP理解：</h2>
<p>AOP，一般称为面向切面，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理。</p>
<p>AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表。</p>
<p>（1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p>
<p>（2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p>
<p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：</p>
<pre><code>    ①JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例,  生成目标类的代理对象。

    ②如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。
</code></pre>
<p>（3）静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。</p>
<p>InvocationHandler 的 invoke(Object  proxy,Method  method,Object[] args)：proxy是最终生成的代理实例;  method 是被代理目标实例的某个具体方法;  args 是被代理目标实例某个方法的具体入参, 在方法反射调用时使用。</p>
<h3 id="代理的分析">代理的分析</h3>
<p>客户 - 生产厂家(生产和销售(售后)都是厂家直接对接客户)</p>
<p>生产厂家不希望生产和销售(售后)带来的运营压力</p>
<p>之后第三方(经销商和代理商)看到商机,负责厂家的销售和售后</p>
<p>之后客户去找经销商/代理商去买商品,当客户的商品出现了问题,也是去找代理商,代理商负责和厂家联系,解决商品的售后(代理商可能会养一些人做一些简单的商品问题的处理)或者直接找厂家处理有问题商品的毛病</p>
<p>而厂家每次生产出商品之后,就会通知这些代理商把商品买走,一级代理在分销给二级代理,二级代理在分销给三级代理,最后到消费者手中.这样生产厂家就节省了运营的成本</p>
<p>那么在java中如何体现代理商这个理念呢  需要用到java动态代理机制</p>
<h3 id="代码操作">代码操作</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringCloud]]></title>
        <id>https://oracleliudao.github.io/post/springcloud/</id>
        <link href="https://oracleliudao.github.io/post/springcloud/">
        </link>
        <updated>2020-04-10T15:55:22.000Z</updated>
        <content type="html"><![CDATA[<p>🤠springboot是一个一个的微服务,springcloud协调微服务的治理框架,它将springboot开发的一个个单体的微服务整合起来并管理,为各个微服务之间提供配置管理,服务发现,断路器,路由,全局锁,分布式会话等集成服务<br>
🤡springcloud与dubbo的区别?<br>
springcloud采用的是基于HTTP的REST的方式通信<br>
dubbo采用的是RPC通信<br>
👩‍🔧通过 pom 设置 Maven 通过 JDK 1.8 进行编译</p>
<pre><code class="language-xml"> &lt;properties&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
    &lt;/properties&gt;
</code></pre>
<h1 id="springcloud">springcloud</h1>
<h2 id="1创建一个父工程microservicecloud">1.创建一个父工程microservicecloud</h2>
<h2 id="2创建一个子类模块-microservicecloud-api">2.创建一个子类模块 microservicecloud-api</h2>
<p>在api子类模块中创建com.liudao.springcloud.entities</p>
<pre><code class="language-xml">  定义一个 public class Dept(orm mysql字段) 类表关系映射 implements serializable
  private Long deptNo; //主键
  private String dname; //部门名称
//来自哪个数据库,因为有可能一个服务对应一个数据库,同一信息被存储到不同的数据库 
  private String db_source; 
 生成get/set/空参构造/全参数构造方法/toString方法
</code></pre>
<p>思考:以上代码每次生成一个entities都需要动四次鼠标,虽然都是自动生成,有没有好的办法一次生成?</p>
<p>​        如果又新增一个Dept的主管负责人的属性,是不是需要又一次重复性的操作一回?</p>
<p>​		明天在加一个Dept的地址,楼层,你怎么办? 去掉一个字段呢?</p>
<p>解决办法: 可以使用Lombok来解决以上问题</p>
<blockquote>
<p>可以选择不同有参构造的注解,自定义带参数构造,这样更灵活</p>
</blockquote>
<ul>
<li>Accessors存取器</li>
</ul>
<p>lombok支持链式编程的注解@Accessors(chain=true)</p>
<pre><code class="language-java">Dept dept = new Dept();
dept.setDeptNo(1L).setDname(&quot;开发部&quot;).setDb_source(&quot;db01&quot;);
</code></pre>
<p>最后一步:clean/install</p>
<h2 id="3创建一个新子类module-microservicecloud-provider-dept-8001部门微服务提供者">3.创建一个新子类module -&gt; microservicecloud-provider-dept-8001部门微服务提供者</h2>
<p>约定&gt;配置&gt;编码</p>
<p>也就是说创建完一个微服务,你不要着急编码,先考虑下都有什么约定,在完成配置,最后在编码</p>
<p>先来查看一下pom文件</p>
<pre><code class="language-xml">//引入自定义的api通用包,可以使用Dept的entity
&lt;dependency&gt;
    &lt;groupId&gt;com.liudao.springcloud&lt;/groupId&gt;
    &lt;artifactId&gt;mikroserverclod-api&lt;/artifactId&gt;
     &lt;version&gt;${project.version}&lt;/verson&gt;
&lt;/dependency&gt;
</code></pre>
<p>导入的依赖有:</p>
<p>junit/mysql-connector-java(mysql的驱动包)/druid连接池/logback-core日志/mybatis-spring-boot-start(spring和mybatis的整合)/jetty内嵌的服务器/start-web/start-test/热部署springloaded/boot-devtools</p>
<p>本模块的配置文件在resources中创建application.yml</p>
<pre><code class="language-yml">//spring和mybatis的整合配置
server
 port: 8001
mybatis:
 config-location: classpath:mybatis/mybatis.cfg.xml
 type-aliases-package: com.liudao.springcloud.entities
 mapper-location:
 - classpath:mybatis/mapper/**/.xml 
spring:
  application:
   name:microservicecloud-dept   //这个很重要,对外暴露的名字
  datasource:
   type:com.alibaba.druid.pool.DruidDataSource
   driver-class-name: org.gjt.mm.mysql.Drivid
   url:
   username:
   password:
   dbcp2:
     min-idle: 5
     initial-size: 5
     max-total: 5
     max-wait-millis:200
</code></pre>
<h2 id="4在dept子类模块中的resource创建一个mybatis文件配置mybatisxml">4.在dept子类模块中的resource创建一个mybatis文件,配置mybatis.xml</h2>
<p>它里面的配置文件都被整合到了spring的配置文件中了</p>
<p>Mybatis提供查询缓存，如果缓存中有数据就不用从数据库中获取，用于减轻数据压力，提高系统性能。</p>
<p>一级缓存是<strong>SqlSession级别</strong>的缓存。在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。</p>
<p>二级缓存是Mapper（namespace）级别的缓存。多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>
<pre><code class="language-xml">&lt;settings&gt;
	&lt;setting name=&quot;cacheEnable&quot; value=&quot;true&quot;/&gt; 开启二级缓存
&lt;/settings&gt;
</code></pre>
<h2 id="5导入了依赖配置了applicationxml和mybaitsxml之后开始写mysql创建dept数据库脚本">5.导入了依赖,配置了application.xml和mybaits.xml,之后开始写mysql创建dept数据库脚本</h2>
<p>在microservicecloud-provider-dept-8001创建一个dao层,用来写交互数据库查询dept的业务代码</p>
<pre><code class="language-java">注解的方式
public Interface IDeptDao{  
   //查询出所有部门
    @select(&quot;select * from dept&quot;)
    List&lt;Dept&gt; findDeptAll();
    //根据Id查询部门
    @select(&quot;select * from dept where id = #{id}&quot;)
    Dept findDeptById(Integer id);
}
</code></pre>
<pre><code class="language-java">dao+impl的方式是传统方式,用了&lt;&gt;mybatis框架现在dao+daoMpper.xml
为了把mapper这个DAO交給Spring管理  / 因为你spring和mybatis进行整合,必须加@mapper这个注解
@Mapper
public Interface IDeptDao{
   List&lt;Dept&gt; findDeptAll();
  Dept findDeptById(Long id);
  boolean addDept(Dept dept);
}
</code></pre>
<h2 id="6在resourcemybatis下新建mapper文件创建deptmapperxml">6.在resource/mybatis下新建mapper文件创建DeptMapper.xml</h2>
<pre><code class="language-xml">&lt;mapper namespace=&quot;com.liudao.springcloud.dao.DeptDao&quot;&gt;
    &lt;select id=&quot;findDeptById&quot; resultType=&quot;Dept&quot; parameterType=&quot;Long&quot;&gt;
        select deptno,dname,db_source from dept where id = #{deptno}
    &lt;/select&gt;
    &lt;insert id=&quot;addDept&quot; resultType=&quot;boolean&quot; parameterType=&quot;dept&quot;&gt;
        insert into dept(dname,db_source ) values(#{dname},DATABASE());
    &lt;/insert&gt;
&lt;/mapper&gt;

</code></pre>
<h2 id="7service层的dao和impl">7.service层的dao和impl</h2>
<pre><code class="language-java">public Interface IDeptService{
   List&lt;Dept&gt; findDeptAll();
  Dept findDeptById(Long id);
  boolean addDept(Dept dept);
}
</code></pre>
<pre><code class="language-java">@service
@Transtation
public class DeptServiceImpl implements IDeptService {
    //注入Userdao
    @autoWrite
    private IuserDao userdao
   List&lt;Dept&gt; findDeptAll(){
       return userdao.findDeptAll();
    }
  Dept findDeptById(Long id);
  boolean addDept(Dept dept);
}
</code></pre>
<h2 id="8创建controller层">8.创建controller层</h2>
<pre><code class="language-java">@controller
@requestMapping(&quot;/dept&quot;)
calss DeptController{
	 @autoWrite
	private IDeptService deptService;
	@requestMapping(value = &quot;/findDeptAll&quot;,method=RequestMethod.Get)
	public String findDeptAll(){
		return deptService.findDeptAll();
	
	}
	 // @RequestBody主要用来接收前端传递给后端的json字符串中的数据
	 	@requestMapping(&quot;/add&quot;,method=RequestMethod.Post)
	public boolean add(@requestBody Dept dept){
		return deptService.add(dept);
	}
    
    @requestMapping(&quot;/findDeptById/{id}&quot;,method=RequestMethod.Get)
	public boolean findDeptById(@pathVariable(&quot;id&quot;) Long id){
		return deptService.findDeptById(id);
	}
}
</code></pre>
<h2 id="9主启动类deptprovider8001_app">9.主启动类DeptProvider8001_App</h2>
<h2 id="10创建一个消费者microservicecloud-consumer-dept-80">10.创建一个消费者microservicecloud-consumer-dept-80</h2>
<p>​    先导入依赖 : 自定义的api(dept) 提供者和消费者都需要用到dept这个实体类,所以抽取放到通用的api最合适</p>
<p>​	start-web/热部署 devtools</p>
<p>配置yml :</p>
<pre><code class="language-xml">server:
  port: 80
</code></pre>
<p>创建一个config配置类</p>
<pre><code class="language-java">@Configuration
public class Config{  //等价于applicationContext.xml配置文件
    &lt;bean id=&quot;userService&quot; class=&quot;com.liudao.userServiceImpl&quot;&gt;
     这里这样写
        @Bean
        public UserService getUserService(){
        	return new UserServiceImpl();
    }
    
    public RestTemplate getRestTemplate(){
        return new RrstTemplate();
    }
}
</code></pre>
<p>创建controller层创建DeptController_Consumer</p>
<pre><code class="language-java">url请求地址,请求参数,HTTP响应被转换的类型
@RsetController
public class DeptController_Consumer{
    private static final String REST_URL_PREFIX = &quot;https:localhost:8001&quot;;
    //消费者没有service层
    @AutoWrite
    private RestTemplate restTemplate;
    @RequestMapping(value=&quot;/consumer/dept/add&quot;)
   	public boolean add(Dept dept){
     return restTemplate.PostForObject(REST_URL_PREFIX+&quot;/dept/add&quot;,dept,Boolean.class)
    }
     @RequestMapping(value=&quot;/consumer/dept/findDeptById/{id}&quot;)
   	public Dept add(@pathVariable(&quot;id&quot;) Long id){
     return restTemplate.GetForObject(REST_URL_PREFIX+&quot;/dept/findDeptById&quot;+id,Dept.class)
    }      
}
</code></pre>
<p>11.启动类DeptConsumer80_APP</p>
<h1 id="eureka">Eureka</h1>
<p>服务注册与发现</p>
<h2 id="1导入依赖配置applicationxml-启动类enableeurekaservcer">1.导入依赖,配置application.xml ,启动类(@EnableEurekaServcer)</h2>
<pre><code class="language-xml">server:
  port: 7001
eureka:
 instance:
  hostname: localhost
 client:
   register-write-eureka: flase //表示不向注册中心注册自己
   fetch-register: flase //表示自己就是注册中心,不需要检索
   service-url:
     defaultZone: http://${eurka.instance.hostname}:${server.port}/eureka/
		设置Eureka server交互地址查询服务和注册服务都需要依赖这个地址
</code></pre>
<h2 id="2在provider中导入依赖-start-eurekastart-config">2.在provider中导入依赖 start-eureka/start-config</h2>
<h2 id="3配置provider中的applicationxml文件">3.配置provider中的application.xml文件</h2>
<pre><code class="language-xml">eureka:
  client:  #客户端注册进eureka服务列表内
	server-url:
		defaultZone: http://localhost:7001/eureka
</code></pre>
<h2 id="4配置provider的主启动类的注解enableeurekaclient表示服务启动后会自动注册进eureka服务中">4.配置provider的主启动类的注解@EnableEurekaClient表示服务启动后会自动注册进Eureka服务中</h2>
<h2 id="5主机映射名的修改eureka优化">5.主机映射名的修改(Eureka优化)</h2>
<p>只需要在provider中的application.xml中添加</p>
<p>insatance:</p>
<p>​    instance-id: micorservicecloud-dept8001</p>
<h2 id="增加访问路径可以显示ip地址">//增加访问路径可以显示Ip地址</h2>
<p>​     prefer-ip-address: true</p>
<h2 id="微服务info内容的完善">微服务info内容的完善</h2>
<p>添加依赖  start-actuator</p>
<h2 id="6自我保护机制90心跳连接">6.自我保护机制(90心跳连接)</h2>
<h2 id="7服务的发现">7.服务的发现</h2>
<p>让消费者发现我们的在euecka中注册的服务</p>
<h2 id="8eureka集群配置">8.eureka集群配置</h2>
<h1 id="硬件推荐">硬件推荐</h1>
<p>竖屏显示器：明基 BenQ Bl2480T 特点：在同等价位里调节灵活，VGA,HDMI,DP接口都有，并且兼有BI智慧调光能自动调光和升暗部细节 价格1200元 ，你们值得拥有 现在参考价 1149  23.8英寸 分辨率1920x1080<br>
键盘：阿米洛机械键盘茶轴无线 参考价:479元 兼容mac和windows<br>
键盘:苹果magic keyboard 参考价:<strong>728</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello 六道]]></title>
        <id>https://oracleliudao.github.io/post/hello-gridea/</id>
        <link href="https://oracleliudao.github.io/post/hello-gridea/">
        </link>
        <updated>2020-04-10T15:35:02.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>👏  欢迎来到 <strong>六道博客</strong> ！<br>
✍️ 记录自己的生活、心情、知识、笔记、创意</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么不推荐学Python去找工作?为什么只会Python很难找到工作?]]></title>
        <id>https://oracleliudao.github.io/post/wei-shi-me-wo-bu-tui-jian-xue-python-qu-zhao-gong-zuo-wei-shi-me-zhi-hui-python-hen-nan-zhao-dao-gong-zuo/</id>
        <link href="https://oracleliudao.github.io/post/wei-shi-me-wo-bu-tui-jian-xue-python-qu-zhao-gong-zuo-wei-shi-me-zhi-hui-python-hen-nan-zhao-dao-gong-zuo/">
        </link>
        <updated>2020-04-10T12:48:31.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://oracleliudao.github.io/post-images/1585266622241.jpg" alt="" loading="lazy"><br>
不得不说Python目前是一个很热门的编程语言,但是热门不见得好找工作,用Python写一点小脚本,自动化的工具很有用.<br>
Python涉及的领域:<br>
AI 人工智能, 机器学习算法领域.😀<br>
第二个领域就是数据分析<br>
三爬虫<br>
web后端开发<br>
自动化测试啊,运维,辅助脚本😃<br>
以前从网站爬一些东西很容易,java就能搞定,但是近年一些网站反扒机制做的很好,你想爬到你感兴趣的东西越来越难了<br>
豆瓣好像是用Python做的后端<br>
Python也就是做做公司里面的某些辅助系统<br>
如果不是研究生学位,或算法很好的话,不建议学Python 😄</p>
]]></content>
    </entry>
</feed>